ОБУЧАЮЩИЕ ВИДОСЫ ПО ДЖАНГЕ:

7 принято создавать базовый шаблон и дочерние на основе него
8 форматирование url адресов посредством {% url 'name' p.pl %}
9 создание связей между моделями через foreign_key
10 админ панель django
11 пользовательские теги для шаблонов страниц (simple tags, inclusion tags)
12 добавляем slug к URL
13 используем и создаем формы, не связанные с моделями
14 формы, связанные с моделями и пользовательские валидаторы
15 Классы представлений CBV (listview, detailview, createview)
16 Основы ORM
17 Mixins, миксины
18 Пагинация страниц
19 Регистрация пользователей на сайте
20 Авторизация юзеров
21 Оптимизация сайта w/ Django Debug Toolbar
22 Кэшипование данных
23 Captcha


python manage.py makemigrations
создаем файлик с классом модели в папке миграций
при обновлении чего-либо в базах запускать сначала его, потом migrate

-- python manage.py sqlmigrate women 0001
создаем sql файл на основе файла миграции из папки по названию и номеру файла

python manage.py migrate
осуществляет все миграции джанго проекта и создает таблички в базе, указанной в конфиге


python manage.py shell 

from women.models import Women - мои модели
from women.models import Category - мои модели
from django.db import connection - смотреть sql запросов
from django.db.models import Q - класс для формирования фильтров в запросе
from django.db.models import * - для импорта всех аггрегирующих функций
from django.db.models import F - класс для фильтрации по полям полученных записей
from django.db.models.functions import Length - тестим БД функции
from django.db import reset_queries - очищает список последних выполненных запросов
from django.core.paginator import Paginator

connection.queries - вызов словаря с запросами
reset_queries()

Women.objects.all() - litim 21
Women.objects.create() - without save()
Women.objects.filter()
Women.objects.exclude()
Women.objects.order_by()
Women.objects.get()
Women.objects.filter().order_by()
Women.objects.filter('-pk')

wo = Women.objects.get(pk=1)
wo.title = 'new'
wo.save()

wd = Women.objects.filter(pk__gte=1)
wd.delete()

Women(title='shir', content='sszz')
w = _

c = Category.objects.get(pk=1)
c.women_set.all()

w = Women.objects.get(pk=7)
w.get_previous_by_time_update(pk__gt=10)

Women.objects.latest('time_update')

Women.objects.order_by('-pk').first()

Women.objects.filter(~Q(pk__lte=5) & Q(cat_id=2))

c2 = Category.objects.get(pk=2)
c2.women_set.exists() - существуют ли записи под данной категорией

с2.women_set.count() - кол-во записей под данной категории

Women.objects.filter(pk__gt=4).count()

Women.objects.filter(cat__in=[1])
Women.objects.filter(cat__slug='aktrisy') - то же самое что выше
Women.objects.filter(cat__name='Актрисы') - то же самое

Women.objects.filter(cat__name__contains='цы')

Category.objects.filter(women__title__contains='ли')
Category.objects.filter(women__title__contains='ли').distinct() - только уникальные

агрегирующие функции (функции агрегации):
Women.objects.aggregate(Min('cat_id'))
Women.objects.aggregate(Min('cat_id'), Max('cat_id'))
Women.objects.aggregate(cat_min=Min('cat_id'), cat_max=Max('cat_id'))

Women.objects.aggregate(res=Sum('cat_id') - Count('cat_id'))
Women.objects.filter(pk__gt=4).aggregate(res=Avg('cat_id'))

Women.objects.values('title', 'cat_id').get(pk=1) - ограничиваем выборку полей
Women.objects.values('title', 'cat__name').get(pk=1) - с иннер джоином под капотом

Women.objects.values('cat_id').annotate(Count('id')) - аггрегирующая ф-ия, учитывает ordering в Meta модели
SELECT count(id) FROM women GROUP BY cat_id - такой запрос сделает команда выше

Women.objects.annotate(Count('cat')) - аггрегирующая для всех полей без группировки

c = Category.objects.annotate(Count('women'))
c[0].women__count - содержит кол-во связанных с данной записью записей

c = Category.objects.annotate(total=Count('women'))
c[0].total - то же самое, только именуем параметр

c = Category.objects.annotate(total=Count('women')).filter(total__gt=0) - выбираем только рубрики, содержащие записи

Women.objects.filter(pk__gt=F('cat_id')) - получим все записи, кроме первой
сравнивает первичный ключ не с конкретным значением, а с полем ТЕКУЩЕЙ записи

Women.objects.filter(slug='bejonse').update(views=F('views')+1) - увеличит значение поля на 1, относительно текущего (по сути += 1)

в джанге подход += 1 не рекомендуется, тк при одновременном получении одной и той же страницы разными пользователями, могут возникнуть неопределенности (+1 вместо +2) - ИЗБЕЖАНИЕ КОЛЛИЗИЙ
w = Women.objects.get(pk=1)
w.views = F('views') + 1
w.save()

ps = Women.objects.annotate(len=Length('title')) - длина вычисляется с помощью СУБД, а не питона и заносится в переменную объекта (РЕКОМЕНДУЕТСЯ делать так)
fir item in ps:
    print(item.title, item.len)

w = Women.objects.raw('SELECT * FROM women_women') - роу запросы, пишем напрямую, получаем RawQuerySet
w = Category.objects.raw('SELECT * FROM women_women') - тот же самый результат, вызываемый класс модели не имеет значения, мы обращаемся к менеджеру записей objects, хотя сами объекты в списке w будут являться уже экземплярами вызываемого класса (ВАЖНО)

пока мы не обратимся к какому-либо полю из полученного объекта w, запрос к БД не будет сделан (эдакий lazy_load)

w = Women.objects.raw('SELECT id, title FROM women_women') - запрос с указанием полей всегда должен включать в себя PrimaryKey
w[0].is_published - ВАЖНО механизм отложенной загрузки полей: при обращении к конкретному полю, не указанному ранее в запросе, происходит дополнительное обращение к БД для его получения
это не лучшаяя практика и такого нужно избегать - не нужно нагружать СУБД

slug = 'shakira'
w = Women.objects.raw("SELECT id, title FROM women_women WHERE slug='" + slug + "'") - это прямой путь к SQL-инъекциям

w = Women.objects.raw("SELECT id, title FROM women_women WHERE slug='%s'", [slug]) - это безопасный путь, можно передавать несколько переменных

women = ['Анджелина Джоли', 'Дженнифер Лоуренс', 'Джулия Робертс', 'Марго Робби', 'Ума Турман', 'Ариана Гранде', 'Бейонсе', 'Кэтти Перри', 'Рианна', 'Шакира']

p = Paginator(women, 3) - второй параметр - сколько элементов отображать на странице
p.count
p.num_pages
p.page_range - последовательность чисел от 1 до num_pages

p1 = p.page(1)
p1.object_list
p1.has_next()
p1.has_previous()
p1.has_other_pages() - есть ли другие страницы
p1.next_page_number()
p1.previous_page_number()
