1. Как сделать запрос на ManyToMany в обратную сторону(reverse)?
q.trainer_set.all()

2. Опишите чем отличаются друг от друга различные HTTP-методы (GET от POST, например) так, как вы это понимаете.
GET запрос содержит список параметров в url (то есть GET запрос кешируется, остается в истории браузера, имеет ограничение по длине), POST запрос содержит параметры в теле запроса (безопаснее)

3. У вас есть модель(скрин), необходимо по данной модели описать форму TrainerForm(описать только класс формы).
class TrainerForm(forms.ModelForm):
class Meta:
model = Trainer
fields = ['first_name', 'last_name']

4. Представьте, что мы отправили форму TrainerForm из прошлого вопроса через context в редндер в HTML-файл. Опишите пример HTML-файла для вывода полей формы как двух отдельных input'ов - сперва поле Фамилии, потом поле Имени(без цикла)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Форма для тренеров</title>
</head>
<body>

<form action="{% url 'trainer_form_mapping' %}" method="post" enctype="multipart/form-data">
    {% csrf_token %}

    {{ form.as_p }}

    <input type="submit" value="Добавить тренера">
</form>

</body>
</html>

5. Опишите пример модели, с полем "дата и время последнего изменения", в котрой при каждом изменении имеющейся записи перезаписывается поле "дата и время последнего изменения" на текущую дату и время
class UpdateModel(models.Model):
    time_update = models.DateTimeField(auto_now=True, verbose_name='Время изменения')

6. Заказчик просит ускорость загрузку большого JSON(10 МБ), отдаваемого по API из вашего Django-приложения. Системный администратор предложил включить GZip шифрование на уровне django, что по его расчетам сожмет JSON до 15 КБ. Как бы вы включили GZip-шифрование?
обновлю список мидлварей в конфиг файле settings.py:
MIDDLEWARE = [
...
'django.middleware.gzip.GZipMiddleware',
]

над функцией представления, возвращающей json, напишу декоратор @gzip_page()

7. Вам необходимо реализовать выполнение определенной функции из вашего django-приложения регулярно. Системный администратор сказал, что готов поставить на cron любую команду, какую вам необходимо. Задача сводится к тому, чтобы запустить вашу функцию из командной строки. Опишите как вы реализуете запуск вашей функции из командной строки средствами Django

будем выполнять команду каждый день в 3 часа ночи (учитывая, находимся в папке с проектом джанго и python.exe прописан в переменных средах)
команда прописана в management/commands/command.py

0 3 * * * python manage.py command

8. Заказчик просит добавить в стандартный класс Пользователя дополнительные поля. Как вы решите такую задачу средствами Django?
расширю модель пользователя, создав новый класс-наследник от AbstractUser и пропишу в нем новые поля
+ изменю значение AUTH_USER_MODEL в конфиг файле settings.py на путь до класса с новой моделью пользователя

9. Был ли опыт работы с задачами на фронте?
да, js + jquery
